import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import keyboards
import API_repository



import tokens
token = tokens.my_token
vk = vk_api.VkApi(token=token)
longpoll = VkLongPoll(vk)

def sender(user_id, answer, keyboard_number):
    vk.method('messages.send', {
                                'user_id': user_id,
                                'message': answer,
                                'random_id': 0,
                                'keyboard': keyboards.keyboards[keyboard_number]
                               }
             )

def sender_without_keyboard(user_id, answer):
    vk.method('messages.send', {
                                'user_id': user_id,
                                'message': answer,
                                'random_id': 0,
                               }
             )

def log(event):
    print('\n\nNew message:')
    print('For me by: {}'.format(event.user_id))
    print("Text: " + event.text)


for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        log(event)

        user_state = API_repository._getUserState(event.user_id)['response']

        if event.text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' and user_state['state'] != 'Finish':
            API_repository._setUserState(event.user_id, 'RegisterUser')
            sender(event.user_id, '–ö—Ç–æ –í—ã?', 0)

        elif event.text == '–°—Ç—É–¥–µ–Ω—Ç' and user_state['state'] != 'Finish':
            API_repository._setUserState(event.user_id, 'RegisterUser_S')
            sender(event.user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', 1)

        elif event.text == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' and user_state['state'] != 'Finish':
            API_repository._setUserState(event.user_id, 'RegisterUser_P')
            sender_without_keyboard(event.user_id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò.–û."')

        elif event.text == '–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è':
            API_repository._setUserState(event.user_id, 'Start')
            sender(event.user_id, '–ü–æ–∂–∞–ª—É–π—Ç—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', 4)

        elif event.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è' and user_state['state'] == 'Finish':
            if user_state['role'] == 'student':
                schedule_today = API_repository._getScheduleStudent(user_state['role'], user_state['arg'], 'today')['response']

                schedule_text = 'üë• ' + user_state['arg'] + '\n\n'
                for i in schedule_today:
                    schedule_text = schedule_text + 'üìñ ' + i['subjectName'] + '\n'
                    schedule_text = schedule_text + 'üìÑ ' + i['lessonType'] + '\n'
                    schedule_text = schedule_text + '‚è∞ ' + i['lessonStart'] + ' - ' + i['lessonEnd'] + '\n'
                    if i['subGroup'] == 0:
                        schedule_text = schedule_text + 'üóø ' + '–û–±–µ –ø–æ–¥—Ä–≥—É–ø–ø—ã' + '\n'
                    elif i['subGroup'] == 1:
                        schedule_text = schedule_text + 'üóø ' + '1 –ø–æ–¥—Ä–≥—É–ø–ø–∞' + '\n'
                    elif i['subGroup'] == 2:
                        schedule_text = schedule_text + 'üóø ' + '2 –ø–æ–¥—Ä–≥—É–ø–ø–∞' + '\n'
                    schedule_text = schedule_text + 'üö™ ' + i['className'] + '\n'
                    schedule_text = schedule_text + 'ü§° ' + i['prepodName'] + '\n\n'

                sender(event.user_id, schedule_text, 2)


            elif user_state['role'] == 'prepod':
                schedule_today = API_repository._getSchedulePrepod(user_state['role'], user_state['arg'], 'today')

        elif event.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞' and user_state['state'] == 'Finish':
            if user_state['role'] == 'student':
                schedule_tomorrow = API_repository._getScheduleStudent(user_state['role'], user_state['arg'], 'tomorrow')['response']

                schedule_text = 'üë• ' + user_state['arg'] + '\n\n'
                for i in schedule_tomorrow:
                    schedule_text = schedule_text + 'üìñ ' + i['subjectName'] + '\n'
                    schedule_text = schedule_text + 'üìÑ ' + i['lessonType'] + '\n'
                    schedule_text = schedule_text + '‚è∞ ' + i['lessonStart'] + ' - ' + i['lessonEnd'] + '\n'
                    if i['subGroup'] == 0:
                        schedule_text = schedule_text + 'üóø ' + '–û–±–µ –ø–æ–¥—Ä–≥—É–ø–ø—ã' + '\n'
                    elif i['subGroup'] == 1:
                        schedule_text = schedule_text + 'üóø ' + '1 –ø–æ–¥—Ä–≥—É–ø–ø–∞' + '\n'
                    elif i['subGroup'] == 2:
                        schedule_text = schedule_text + 'üóø ' + '2 –ø–æ–¥—Ä–≥—É–ø–ø–∞' + '\n'
                    schedule_text = schedule_text + 'üö™ ' + i['className'] + '\n'
                    schedule_text = schedule_text + 'ü§° ' + i['prepodName'] + '\n\n'

                sender(event.user_id, schedule_text, 2)
                # schedule_text = 'üë• ' + user_state['arg'] + '\n\n'
                # for i in schedule_tomorrow:
                #     schedule_text = schedule_text + 'üìñ ' + i['lessonType'] + ' '
                #     schedule_text = schedule_text + i['subjectName'] + '\n'
                #     schedule_text = schedule_text + '‚è∞ ' + i['lessonStart'] + ' - ' + i['lessonEnd'] + ' '
                #     schedule_text = schedule_text + 'üö™ ' + i['className'] + '\n'
                #     if i['subGroup'] == 0:
                #         schedule_text = schedule_text + 'üóø ' + '–û–±–µ –ø–æ–¥—Ä–≥—É–ø–ø—ã' + ' '
                #     elif i['subGroup'] == 1:
                #         schedule_text = schedule_text + 'üóø ' + '1 –ø–æ–¥—Ä–≥—É–ø–ø–∞' + ' '
                #     elif i['subGroup'] == 2:
                #         schedule_text = schedule_text + 'üóø ' + '2 –ø–æ–¥—Ä–≥—É–ø–ø–∞' + ' '
                #     schedule_text = schedule_text + 'ü§° ' + i['prepodName'] + '\n\n'





            elif user_state['role'] == 'prepod':
                schedule_tomorrow = API_repository._getSchedulePrepod(user_state['role'], user_state['arg'], 'tomorrow')

        elif event.text == '–ù–∞ 2 –Ω–µ–¥–µ–ª–∏' and user_state['state'] == 'Finish':
            if user_state['role'] == 'student':
                schedule_two_weeks = API_repository._getScheduleStudent(user_state['role'], user_state['arg'], 'two_weeks')

            elif user_state['role'] == 'prepod':
                schedule_two_weeks = API_repository._getSchedulePrepod(user_state['role'], user_state['arg'], 'two_weeks')



        #–í–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ –∏–∑ –ø–µ—Ä–µ—á–Ω—è
        else:
            if user_state['state'] == 'None':
                API_repository._setUserState(event.user_id, 'Start')
                sender(event.user_id, '–ü–æ–∂–∞–ª—É–π—Ç—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', 4)

            elif user_state['state'] == 'Start':
                sender(event.user_id, '–ù–£ –¢–´ –î–£–†–ê–ö –ë–õ–Ø–¢–¨!? –ö–ù–û–ü–ö–ê –ñ–ï –ï–°–¢–¨', 4)

            elif user_state['state'] == 'RegisterUser':
                sender(event.user_id, '–ù–£ –¢–´ –î–£–†–ê–ö –ë–õ–Ø–¢–¨!? –ö–ù–û–ü–ö–ê –ñ–ï –ï–°–¢–¨', 0)

            elif user_state['state'] == 'Finish':
                if user_state['role'] == 'student':
                    sender(event.user_id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã ' + user_state['arg'], 2)
                else:
                    sender(event.user_id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ' + user_state['arg'], 2)

            elif user_state['state'] == 'RegisterUser_S':
                if API_repository._checkGroup(event.text.upper())['status'] == 'OK':
                    API_repository._registerUser(event.user_id, 'student', event.text.upper())
                    sender(event.user_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 2)
                    API_repository._setUserState(event.user_id, 'Finish')
                else:
                    API_repository._setUserState(event.user_id, 'Start')
                    sender(event.user_id, '–ü–æ–∂–∞–ª—É–π—Ç—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', 4)

            elif user_state['state'] == 'RegisterUser_P':
                if API_repository._checkFio(event.text)['status'] == 'OK':
                    API_repository._registerUser(event.user_id, 'prepod', event.text)
                    sender(event.user_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 2)
                    API_repository._setUserState(event.user_id, 'Finish')
                else:
                    API_repository._setUserState(event.user_id, 'Start')
                    sender(event.user_id, '–ü–æ–∂–∞–ª—É–π—Ç—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', 4)